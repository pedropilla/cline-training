{"prompt": "How do I request approval for a dangerous command?","completion": "When using execute_command for potentially dangerous operations, set requires_approval to true:\n\n<execute_command>\n<command>rm -rf /</command>\n<requires_approval>true</requires_approval>\n</execute_command>\nThis ensures the user must explicitly approve the command."}
{"prompt": "Show me how to search JavaScript files for 'console.log'","completion": "<search_files>\n<path>src/</path>\n<regex>console\\.log</regex>\n<file_pattern>*.js</file_pattern>\n</search_files>\nThis will search all .js files in src/ for console.log statements."}
{"prompt": "How to handle a failed tool execution?","completion": "If a tool fails:\n1. Analyze the error message in <thinking> tags\n2. Determine if retry is safe\n3. Use ask_followup_question if needed:\n<ask_followup_question>\n<question>The file write failed - should I try a different path?</question>\n</ask_followup_question>"}
{"prompt": "Example of browser scroll action","completion": "<browser_action>\n<action>scroll_down</action>\n</browser_action>\nThis will scroll down one page height in the browser."}
{"prompt": "How to safely close the browser?","completion": "Always end browser sessions with:\n<browser_action>\n<action>close</action>\n</browser_action>\nThis ensures proper cleanup of resources."}
{"prompt": "Proper format for MCP tool arguments?","completion": "Arguments must be valid JSON:\n<use_mcp_tool>\n<server_name>data-server</server_name>\n<tool_name>transform_data</tool_name>\n<arguments>\n{\n  \"input\": \"/data/raw.csv\",\n  \"output\": \"/data/processed.json\"\n}\n</arguments>\n</use_mcp_tool>"}
{"prompt": "When to use list_code_definition_names?","completion": "Use when analyzing code structure:\n<list_code_definition_names>\n<path>src/utils/</path>\n</list_code_definition_names>\nThis lists top-level classes/functions in specified directory."}
{"prompt": "Safe write_to_file example for config","completion": "<write_to_file>\n<path>config/env.prod</path>\n<content>\nAPI_KEY=prod_123456\nDEBUG=false\nLOG_LEVEL=warn\n</content>\n</write_to_file>\nAlways include complete file contents."}
{"prompt": "How to request current directory listing?","completion": "<list_files>\n<path>.</path>\n<recursive>false</recursive>\n</list_files>\nLists top-level items in current directory."}
{"prompt": "Proper error recovery workflow","completion": "1. Verify failure in user response\n2. Use <thinking> to analyze\n3. Either:\n   a) Retry with corrections\n   b) Use ask_followup_question\n   c) Switch strategies\nNever proceed without confirmation."}
{"prompt": "Example of multiple search/replace blocks","completion": "<replace_in_file>\n<path>index.html</path>\n<diff>\n<<<<<<< SEARCH\n<title>Old Site</title>\n=======\n<title>New Site</title>\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n<meta charset=\"UTF-8\">\n=======\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n>>>>>>> REPLACE\n</diff>\n</replace_in_file>"}
{"prompt": "When to use attempt_completion?","completion": "Only after confirming all previous steps succeeded:\n<thinking>\nAll prior tools succeeded per user confirmation\n</thinking>\n<attempt_completion>\n<result>Task completed successfully</result>\n<command>npm start</command>\n</attempt_completion>"}
{"prompt": "Proper browser launch sequence","completion": "Must start with launch action:\n<browser_action>\n<action>launch</action>\n<url>http://localhost:3000</url>\n</browser_action>\nFollowed by other actions, ending with close."}
{"prompt": "How to request API data via MCP?","completion": "<access_mcp_resource>\n<server_name>api-gateway</server_name>\n<uri>api://users/current</uri>\n</access_mcp_resource>\nRetrieves current user data from API resource."}
{"prompt": "Safe file replacement example","completion": "<replace_in_file>\n<path>config.json</path>\n<diff>\n<<<<<<< SEARCH\n\"timeout\": 30\n=======\n\"timeout\": 60\n>>>>>>> REPLACE\n</diff>\n</replace_in_file>\nSafely updates timeout value."}